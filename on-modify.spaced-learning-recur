#!/usr/bin/env python3

import sys
import json
from datetime import datetime, timedelta, date

original = json.loads(sys.stdin.readline())
modified = json.loads(sys.stdin.readline())

if (not 'spacedLearning' in original or original['spacedLearning'] == 'exclude'):
    print(json.dumps(modified))
    sys.exit(0)

if (modified['status'] != 'completed'):
    print(json.dumps(modified))
    sys.exit(0)

if (modified['spacedLearning'] == 'day14'):
    print("Congratulations. You have finished the spaced learning period for this task.")
    modified['spacedLearning'] = 'exclude'
    print(json.dumps(modified))
    sys.exit(0)

print("Rescheduling task...")

def to_datetime(string):
    return datetime.strptime(string, "%Y%m%dT%H%M%SZ") 

def to_date_string(date):
    return date.strftime("%Y%m%dT%H%M%SZ" )

def shift_date_by_days(original, modified, day_count):
    shifted_time = to_datetime(modified['end']).replace(hour=0,minute=0,second=0) + timedelta(days=day_count)
    modified['wait'] = to_date_string(shifted_time)
    modified['due'] = to_date_string(shifted_time + timedelta(days=1))

next_day = {
        'day0':'day1',
        'day1':'day3',
        'day3':'day7',
        'day7':'day14',
        }

shift_days = {
        'day0': 1,
        'day1': 2,
        'day3': 4,
        'day7': 7,
        }


#If not previously wait, schedule for today
if ('wait' not in original):
    modified['wait'] = to_date_string(date.today())

value = modified['spacedLearning']
modified['spacedLearning'] = next_day[value]
shift_date_by_days(original, modified, shift_days[value])
modified['status'] = 'pending'
del modified['end']

print(json.dumps(modified))
sys.exit(0)
